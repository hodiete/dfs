<?php

/**
 * @file
 * Contains webny_solr_searches.module.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Render\Markup;
use Drupal\taxonomy\Entity\Term;

/**
* Implements hook_views_pre_execute().
*/
function webny_solr_searches_views_pre_view($view) {
  // Filter terms /search/% page view.
  if ($view->current_display == 'webny_search_page') {
    // Set filter term id contextual filter based url value.
    if (isset($view->args[0])) {
      // Check for numeric value or name.
      if (is_numeric($view->args[0])) {
        $filter_term_id = $view->args[0];
      }
      else {
        $filter_term_name = str_replace('-', '_', $view->args[0]);
        $term = taxonomy_term_machine_name_load($filter_term_name, 'webny_filter_terms_tax');

        // Has matching term. Set a term id argument.
        if ($term) {
          $filter_term_id = $term->tid->value;
        }
      }

      if (isset($filter_term_id)) {
        $parents = \Drupal::service('entity_type.manager')
          ->getStorage('taxonomy_term')
          ->loadParents($filter_term_id);

        // Exclude child terms.
        if (!$parents) {
          $view->setArguments([$filter_term_id]);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function webny_solr_searches_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  // Create a facet block for the page view.
  if ($view->current_display == 'webny_search_page') {
    $variables['filter_term_block'] = \Drupal::service('plugin.manager.block')
      ->createInstance('facet_block:filter_term')
      ->build();
  }

  // Create a facet block for the block view.
  if ($view->current_display == 'webny_search_block') {
    $variables['filter_term_block'] = \Drupal::service('plugin.manager.block')
      ->createInstance('facet_block:filter_term_block')
      ->build();
  }

  // Get the term name ('search_group') to display as the view title bar.
  if ($view->id() == 'webny_search') {
    // Search group is the term name used for the view's title bar.
    $search_group = \Drupal::service('entity_type.manager')
      ->getStorage('taxonomy_term')
      ->load($view->args[0])
      ->getName();

    if ($search_group) {
      $variables['search_group'] = $search_group;
    }
  }
}

/**
 * Implements hook_form_alter();
 */
function webny_solr_searches_form_alter(&$form, $form_state, $form_id) {
  $view = $form_state->getStorage('view');

  if ($form_id == 'views_exposed_form' && $view['view']->id() == 'webny_search') {
    // Add placeholder text to keyword search field.
    $form['keyword']['#attributes']['placeholder'] = t('Keyword(s)');
  }
}

/**
 * Prepares variables for paragraph templates.
 */
function webny_solr_searches_preprocess_paragraph(array &$variables) {
  $type = $variables['paragraph']->getEntityTypeId();
  $bundle = $variables['paragraph']->bundle();
  $paragraph = $variables['elements']['#paragraph'];

  // Filter terms listing handling.
  if ($type == 'paragraph' && $bundle == 'webny_filter_term_listing') {
    // Add view as the output.
    $term_id = $paragraph->webny_filter_term->getValue()[0]['target_id'];
    $variables['content']['webny_filter_term'] = views_embed_view('webny_search', 'webny_search_block', $term_id);
  }
}

// Add machine names to filter terms taxonomy post module install.
function webny_solr_searches_modules_installed($modules) {
  if (in_array('taxonomy_machine_name', $modules)) {
    $term_storage = \Drupal::service('entity_type.manager')
      ->getStorage('taxonomy_term');
    $terms = $term_storage->loadTree('webny_filter_terms_tax', 0, NULL, TRUE);

    foreach ($terms as $term) {
      // If term machine name is empty then create one.
      taxonomy_machine_name_update_term($term);
    }
  }
}

/**
 * Implements hook_token_info_alter().
 */
function webny_solr_searches_token_info_alter(&$info) {
  $info['tokens']['view']['webny-filter-args'] = [
    'name' => t('WebNY: view filter arguments'),
    'description' => t('Comma delimited arguments.'),
  ];
}

/**
 * Implements hook_tokens().
 */
function webny_solr_searches_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  if ($type == 'view' && !empty($data['view'])) {
    $view = $data['view'];

    $bubbleable_metadata->addCacheableDependency($view->storage);

    $exclude_input_keys = [
      'f',
      'ajax_page_state',
      '_wrapper_format',
      'drupal_ajax'
    ];

    $exposed_inputs = array_filter($view->getExposedInput());
    $facet_inputs = isset($exposed_inputs['f']) ? $exposed_inputs['f'] : [];
    $exposed_inputs = array_diff_key($exposed_inputs, array_flip($exclude_input_keys));

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'webny-filter-args':
          if (!$exposed_inputs && !$facet_inputs) {
            $replacements[$original] = '';
            break;
          }

          // Modify facet term input for presentation.
          $facet_inputs_markup = '';
          if ($facet_inputs) {
            $facet_inputs_markup = array_map(function($f) {
              // Extract id from value (ex. filter_term:123).
              $farr = explode(':', $f);
              $fid = array_pop($farr);
              $facet_name = Term::load($fid)->get('name')->value;
              return '<strong>' . $facet_name . '</strong>';
            }, $facet_inputs);
            $facet_inputs_last = (count($facet_inputs_markup) > 1) ?
              ' and ' . array_pop($facet_inputs_markup) : '';
            $facet_inputs_markup = ' available within ' .
              implode(', ', $facet_inputs_markup) . $facet_inputs_last;
          }

          // Modify input values for presentation.
          $exposed_inputs_markup = '';
          if (isset($exposed_inputs['keyword'])) {
            $exposed_inputs['keyword'] = '"<strong>' . $exposed_inputs['keyword'] . '</strong>"';
          }
          if (isset($exposed_inputs['created_date'])) {
            $exposed_inputs['created_date'] = 'from ' . date('m-d-Y', strtotime($exposed_inputs['created_date']));
          }
          if (isset($exposed_inputs['created_date_1'])) {
            $exposed_inputs['created_date_1'] = 'to ' . date('m-d-Y', strtotime($exposed_inputs['created_date_1']));
          }
          if ($exposed_inputs) {
            $exposed_inputs_markup = ' containing ' . implode(' ', $exposed_inputs);
          }

          // Return escaped strings as markup.
          $replacements[$original] = Markup::create(
            Xss::filter($facet_inputs_markup . $exposed_inputs_markup, ['strong'])
          );
          break;

        case 'webny-filter-clear':
          if (!$exposed_inputs && !$facet_inputs) {
            $replacements[$original] = '';
            break;
          }

          $markup = '<span data-dom-id="' . $view->dom_id . '" class="js-form-clear-all">Clear All</span>';
          // Return known safe string as markup.
          $replacements[$original] = Markup::create(Xss::filter($markup, ['span']));
          break;
      }
    }
  }

  return $replacements;
}
