<?php

/**
 * @file
 * Functions for webny_event_content_type module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function webny_event_content_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['field_webny_event_date_start'])) {
    $form['#validate'][] = '_webny_event_datetime_form_validate';
    $form['#attached']['library'][] = 'webny_event_content_type/datetime_combine';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function webny_event_content_type_preprocess_node(&$variables) {
  $bundle = $variables['node']->getType();

  if ($bundle == 'webny_event') {
    $start_date = $variables['node']->field_webny_event_date_start->value . 'Z';
    $end_date = $variables['node']->field_webny_event_date_end->value . 'Z';

    // Time values for combining.
    $variables['event_time'] = '';
    $is_all_day = boolval($variables['node']->field_webny_event_all_day->value);
    $start_time = date('g:i', strtotime($start_date));
    $start_time_meridiem = date('A', strtotime($start_date));
    $end_time = date('g:i', strtotime($end_date));
    $end_time_meridiem = date('A', strtotime($end_date));

    $time_zone = date('T', strtotime($start_date));

    // Combined event_time values.
    if ($start_time == $end_time  && $start_time_meridiem == $end_time_meridiem) {
      // Display just the start if times are same.
      $event_time = "$start_time $start_time_meridiem $time_zone";
    }
    elseif ($start_time_meridiem == $end_time_meridiem) {
      // Display with only 1 am/pm.
      $event_time = "$start_time - $end_time $end_time_meridiem $time_zone";
    }
    else {
      // Display both hours' am/pm.
      $event_time = "$start_time $start_time_meridiem - $end_time $end_time_meridiem $time_zone";
    }

    // Add the time zone.
    //$event_time .= ' ' . drupal_get_user_timezone();

    // Combined hour value.
    if (!$is_all_day) {
      $variables['event_time'] = $event_time;
    }

    // Flags.
    $variables['all_day'] = $is_all_day;
    $variables['multi_day'] = (date('dM', strtotime($start_date)) !== date('dM', strtotime($end_date)));

    // Split date values.
    $variables['start_day'] = date('d', strtotime($start_date));
    $variables['start_month'] = date('F', strtotime($start_date));
    $variables['end_day'] = date('d', strtotime($end_date));
    $variables['end_month'] = date('F', strtotime($end_date));
  }
}

/**
 * Validates submission values in event form.
 */
function _webny_event_datetime_form_validate(array &$form, FormStateInterface $form_state) {
  $response = $form_state->getUserInput();

  if (isset($response['field_webny_event_date_start']) && is_array($response['field_webny_event_date_end'])) {
    $start_day = strtotime($response['field_webny_event_date_start'][0]['value']['date']);
    $end_day = strtotime($response['field_webny_event_date_end'][0]['value']['date']);
    $start_time = strtotime($response['field_webny_event_date_start'][0]['value']['time']);
    $end_time = strtotime($response['field_webny_event_date_end'][0]['value']['time']);

    // Confirm to date is not less than from.
    if (!($end_day >= $start_day)) {
      $form_state->setErrorByName('field_webny_event_date_end', t('End date must be greater than or equal to from date.'));
    }
    // Confirm to time is not less than from.
    if (!($end_time >= $start_time)) {
      $form_state->setErrorByName('field_webny_event_date_end', t('End time must be greater than or equal to from time.'));
    }
  }
}
