<?php

/**
 * @file
 * Demonstrates use of the Cron API in Drupal - hook_cron().
 */

/**
 * @defgroup public_appeal_sync: Cron
 * 
 * 
 */

/**
 * Implements hook_cron().
 *
 * We implement hook_cron() to do "background" processing. It gets called every
 * time the Drupal cron runs. We then decide what has to happen in response.
 *
 * In this example, we log a message after the time given in the state value
 * 'public_appeal_sync.next_execution'. Then we update that variable to a time in the
 * future.
 */
function public_appeal_sync_cron()
{
  date_default_timezone_set('America/New_York');

  $service = \Drupal::service('public_appeal_sync.import_json');
  $service->importJson(); 
  
  // At 23'o clock on Saturday
  if (date('N') == 6 && date('G') == 23) {

      /*
      // We access our configuration.
      $cron_config = \Drupal::config('public_appeal_sync.settings');

      // Default to an hourly interval. Of course, cron has to be running at least
      // hourly for this to work.
      $interval = $cron_config->get('interval');
      $interval = !empty($interval) ? $interval : 6048000;

      // We usually don't want to act every time cron runs (which could be every
      // minute) so keep a time for the next run in the site state.
      $next_execution = \Drupal::state()->get('public_appeal_sync.next_execution', 0);

      if (REQUEST_TIME >= $next_execution) {
    // This is a silly example of a cron job.
          // It just makes it obvious that the job has run without
          // making any changes to your database.
          \Drupal::logger('public_appeal_sync')
      ->notice('public_appeal_sync ran');

          if (\Drupal::state()->get('public_appeal_sync_show_status_message')) {
              \Drupal::messenger()->addMessage(t('public_appeal_sync executed at %time', ['%time' => date('c'),]));
              \Drupal::state()->set('public_appeal_sync_show_status_message', false);
          }
          \Drupal::state()->set('public_appeal_sync.next_execution', REQUEST_TIME + $interval);
      }
      
      */
    }
}
