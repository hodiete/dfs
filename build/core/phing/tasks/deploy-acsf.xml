<project name="deploy-acsf" default="deploy-acsf:artifact">

  <target name="deploy-acsf:artifact" description="Builds separate artifact and pushes to git.remotes defined project.yml.">

    <!-- deploy.branch and deploy.commitMsg must be passed as params at runtime. -->
    <if>
      <or>
        <not><isset property="deploy.branch"/></not>
        <not><isset property="deploy.commitMsg"/></not>
      </or>
      <then>
        <fail>You must pass deploy.branch and deploy.commitMsg as runtime parameters.</fail>
        <echo message="Command should match syntax:"/>
        <echo message="./task.sh deploy-acsf:artifact -Ddeploy.branch=8.x-build -Ddeploy.commitMsg='BLT-123: The commit message.'"/>
      </then>
    </if>

    <!-- Delete the existing deploy directory and re-initialize as an empty git repository. -->
    <phingcall target="deploy-acsf:artifact:prepare-dir"/>

    <!-- Add remotes and fetch upstream refs. Checkout local branch tracking
     tracking upstream branch, if it exists. Otherwise create new branch
     locally. -->
    <phingcall target="deploy-acsf:artifact:add-remotes"/>

    <!-- Build artifact and commit locally. -->
    <phingcall target="deploy-acsf:artifact:build"/>
    <phingcall target="deploy-acsf:artifact:commit"/>

    <!-- Push up changes to remotes. -->
    <phingcall target="deploy-acsf:artifact:push-all"/>
  </target>

  <target name="deploy-acsf:artifact:add-remote" description="Adds a git remote and checks out deploy branch from upstream.">
    <echo message="Fetching from git remote ${deploy.remote}"/>

    <!-- Generate and md5 sum of the remote URL to use as remote name. -->
    <exec command="echo ${deploy.remote} | openssl md5 | cut -d' ' -f 2" outputProperty="remoteName"/>
    <exec command="git remote add ${remoteName} ${deploy.remote}" dir="${deploy.dir}" logoutput="true" passthru="true"/>
    <exec command="git fetch ${remoteName}" dir="${deploy.dir}" logoutput="true" passthru="true"/>

    <!-- Create the new branch. -->
    <exec command="git checkout -b ${deploy.branch}" dir="${deploy.dir}" logoutput="true" passthru="true"/>
    <!-- Pull the latest updates (if available). -->
    <exec command="git merge ${remoteName}/${deploy.branch}" dir="${deploy.dir}" logoutput="true" passthru="true"/>
  </target>

  <target name="deploy-acsf:artifact:add-remotes" description="Add remotes and fetch upstream refs.">
    <foreach list="${git.remotes}" param="deploy.remote" target="deploy-acsf:artifact:add-remote"/>
  </target>

  <target name="deploy-acsf:artifact:build" description="Generates a deploy-ready build in deploy.dir."
          depends="deploy-acsf:artifact:clean, deploy-acsf:artifact:copy, deploy-acsf:artifact:composer:install, deploy-acsf:artifact:profile:make, frontend:build, deploy-acsf:artifact:sanitize, deploy-acsf:acsf">
  </target>

  <target name="deploy-acsf:artifact:clean" description="Deletes the contents of the deploy dir.">
    <delete dir="${deploy.dir}/config" failonerror="false" quiet="true" />
    <delete dir="${deploy.dir}/docroot" failonerror="false" quiet="true" />
    <delete dir="${deploy.dir}/hooks" failonerror="false" quiet="true" />
  </target>

  <target name="deploy-acsf:artifact:commit">
    <exec command="git add -A" dir="${deploy.dir}" logoutput="true" passthru="true"/>
    <exec command="git add --force ${deploy.dir}/docroot/profiles/custom/webny/themes/custom/webny_theme/css/styles.css" logoutput="true" passthru="true"/>
    <exec command="git add --force ${deploy.dir}/docroot/profiles/custom/webny/themes/custom/webny_theme/styleguide" logoutput="true" passthru="true"/>
    <exec command="git commit -m '${deploy.commitMsg}' --quiet" dir="${deploy.dir}" logoutput="true" passthru="true"/>
  </target>

  <target name="deploy-acsf:artifact:composer:install" description="Downloads core and contrib to deploy folder.">
    <delete dir="${deploy.dir}/vendor"/>
    <copy todir="${deploy.dir}" overwrite="true">
      <fileset dir="${repo.root}">
        <include name="composer.json"/>
        <include name="composer.lock"/>
      </fileset>
    </copy>
    <exec dir="${deploy.dir}" command="composer install --no-dev --prefer-dist --no-interaction" passthru="true" logoutput="true" checkreturn="true"/>
  </target>

  <target name="deploy-acsf:artifact:profile:make" description="Build a subsidiary makefile shipped with profile.">
    <if>
      <equals arg1="${project.profile.contrib}" arg2="true"/>
      <then>
        <echo message="Building make file for ${project.profile.name}"/>
        <property name="profile.dir" value="${deploy.dir}/docroot/profiles/contrib/${project.profile.name}"/>
        <drush command="make" assume="yes" verbose="TRUE">
          <param>"${profile.dir}/drupal-org.make"</param>
          <param>"${profile.dir}"</param>
          <option name="no-core"></option>
        </drush>
      </then>
    </if>
  </target>

  <target name="deploy-acsf:artifact:copy" description="Copy required files from /docroot/sites to /deploy/docroot/sites.">
    <!-- Make sites/default writable so that we can copy files. -->
    <chmod file="${docroot}/sites/default" mode="0777" />

    <!-- Copy required files from docroot. -->
    <copy todir="${deploy.dir}/docroot" overwrite="true">
      <fileset dir="${docroot}">
        <!-- This should be similar to .gitigore. -->
        <include name="**"></include>
        <exclude name="**/local.*" />
        <exclude name=".gitkeep" />
        <exclude name="core/**" />
        <exclude name="drush/contrib/**" />
        <exclude name="example.gitignore" />
        <exclude name="vendor/**" />
        <exclude name="sites/**/files/**" />
        <exclude name="sites/**/private/**" />
        <exclude name="themes/contrib/**" />
        <exclude name="profiles/contrib/**" />
        <exclude name="modules/contrib/**" />
        <exclude name="**/node_modules/**"></exclude>
        <exclude name="**/bower_components/**"></exclude>
      </fileset>
    </copy>

    <!-- Copy Acquia Cloud hooks. -->
    <copy todir="${deploy.dir}/hooks" overwrite="true">
      <fileset dir="${repo.root}/hooks"/>
    </copy>



    <!-- Copy configuration. -->
    <copy todir="${deploy.dir}/config" overwrite="true">
      <fileset dir="${repo.root}/config"/>
    </copy>

    <!-- Use our own .gitignore -->
    <copy file="${repo.root}/build/core/files/.gitignore" tofile="${deploy.dir}/docroot/.gitignore" overwrite="true"/>

    <!-- Set sites/default back to 755 permissions. -->
    <chmod file="${docroot}/sites/default" mode="0755" />
  </target>

  <target name="deploy-acsf:artifact:prepare-dir" description="Delete the existing deploy directory and re-initialize as an empty git repository.">
    <delete dir="${deploy.dir}" failonerror="false" quiet="true" />
    <exec command="git init ${deploy.dir}" logoutput="true"/>
  </target>

  <target name="deploy-acsf:artifact:push-all">
    <foreach list="${git.remotes}" param="deploy.remote" target="deploy:artifact:push-remote"/>
  </target>

  <target name="deploy-acsf:artifact:push-remote" description="Pushes to a git remote.">
    <exec command="echo ${deploy.remote} | openssl md5 | cut -d' ' -f 2" outputProperty="remoteName"/>
    <exec command="git push ${remoteName} ${deploy.branch}" dir="${deploy.dir}" logoutput="true" outputProperty="deploy.push.output"/>
    <exec command="export DEPLOY_UPTODATE=$(echo '${deploy.push.output}' | grep --quiet 'Everything up-to-date')"/>
  </target>

  <target name="deploy-acsf:acsf" description="Set up custom ACSF distro">
    <move file="${deploy.dir}/docroot/profiles/custom/webny/modules/contrib/acsf" tofile="${deploy.dir}/docroot/modules/contrib" overwrite="true"/>
    <chmod file="${deploy.dir}/docroot/modules/contrib/acsf/scripts/acsf_ssh" mode="0775" />
    <chmod file="${deploy.dir}/hooks/common/pre-web-activate/000-acquia-deployment.php" mode="0775" />
    <chmod file="${deploy.dir}/hooks/common/post-db-copy/000-acquia_required_scrub.php" mode="0775" />
    <exec dir="${deploy.dir}/docroot" command="drush --include=docroot/modules/contrib/acsf acsf-init -y" logoutput="true" passthru="true"/>
  </target>

  <target name="deploy-acsf:artifact:sanitize" description="Removes sensitive files from the deploy docroot.">
    <exec command="find . -type d | grep .git | xargs rm -rf" dir="${deploy.dir}/docroot"/>
    <exec command="find . -type d | grep .git | xargs rm -rf" dir="${deploy.dir}/vendor"/>
    <delete>
      <fileset dir="${deploy.dir}/docroot">
        <include name="core/*.txt"/>
        <include name="**/CHANGELOG.txt"/>
      </fileset>
    </delete>
  </target>
</project>
